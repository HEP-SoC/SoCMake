include_guard(GLOBAL)

# [[[
# This function runs the Icarus Verilog (iverilog) tool on a specified IP library.
#
# The function is a wrapper around the iverilog tool and generates necessary scripts
# and configurations to compile the specified IP library.
#
# :param IP_LIB: Name of the IP library to run iverilog on.
# :type IP_LIB: string
#
# **Keyword Arguments**
#
# :keyword OUTDIR: Output directory for iverilog results. Defaults to BINARY_DIR.
# :type OUTDIR: string
# :keyword EXECUTABLE: Name of the output executable generated by iverilog. Defaults to IP_LIB_iv.
# :type EXECUTABLE: string
# ]]]
function(cocotb_iverilog IP_LIB)
    # Parse the function arguments
    cmake_parse_arguments(ARG "" "VIRTUAL_ENV;TOP_MODULE;OUTDIR;EXECUTABLE;IVERILOG_CLI_FLAGS;TIMEUNIT;TIMEPRECISION;TOPLEVEL_LANG;TESTCASE;COCOTB_TEST" "PATH_MODULE;SIM_ARGS;PLUSARGS" ${ARGN})
    # Check for any unrecognized arguments
    if(ARG_UNPARSED_ARGUMENTS)
        message(FATAL_ERROR "${CMAKE_CURRENT_FUNCTION} passed unrecognized argument " "${ARG_UNPARSED_ARGUMENTS}")
    endif()

    # Include the hardware IP management cmake functions
    include("${CMAKE_CURRENT_FUNCTION_LIST_DIR}/../../hwip.cmake")

    # Assume the IP library is the latest one provided if full name is not given
    alias_dereference(IP_LIB ${IP_LIB})
    # Get the binary directory of the IP library
    get_target_property(BINARY_DIR ${IP_LIB} BINARY_DIR)

    # Set the output directory for iverilog results
    if(NOT ARG_OUTDIR)
        set(OUTDIR ${BINARY_DIR})
    else()
        set(OUTDIR ${ARG_OUTDIR})
    endif()

    # iverilog top module
    if(ARG_TOP_MODULE)
        set(TOP_MODULE ${ARG_TOP_MODULE})
    else()
        message(FATAL_ERROR "No simulation top module provided. Use the function argument TOP_MODULE.")
    endif()

    # Default parameters based on cocotb Makefile.inc
    # Makefile location, run: cocotb-config --makefiles
    if(ARG_TIMEUNIT)
        set(COCOTB_HDL_TIMEUNIT ${ARG_TIMEUNIT})
    else()
        set(COCOTB_HDL_TIMEUNIT "1ns")
    endif()
    # Default parameters based on cocotb Makefile.inc
    if(ARG_TIMEPRECISION)
        set(COCOTB_HDL_TIMEPRECISION ${ARG_TIMEPRECISION})
    else()
        set(COCOTB_HDL_TIMEPRECISION "1ps")
    endif()
    # Default parameters based on cocotb Makefile.inc
    set(COCOTB_RESULTS_FILE "${OUTDIR}/cocotb_results.xml")

    # Cocotb simulation options
    # Cocotb module to run (python script)
    if(ARG_COCOTB_TEST)
        set(COCOTB_TEST ${ARG_COCOTB_TEST})
    else()
        message(FATAL_ERROR "No cocotb module provided. Use the function argument COCOTB_TEST.")
    endif()
    if(ARG_PATH_MODULE)
        # Column separated paths to python files/modules are needed
        string(REPLACE ";" ":" PATH_MODULE "${ARG_PATH_MODULE}")
    else()
        message(FATAL_ERROR "No cocotb module path provided. Use the function argument PATH_MODULE.")
    endif()
    # This one is optional:
    if(ARG_TESTCASE)
        set(TESTCASE ${ARG_TESTCASE})
    endif()
    # This one is optional: top level file language
    if(ARG_TOPLEVEL_LANG)
        set(TOPLEVEL_LANG ${ARG_TOPLEVEL_LANG})
    else()
        set(TOPLEVEL_LANG "verilog")
    endif()

    # Get the IP RTL sources
    get_ip_sources(SOURCES ${IP_LIB} SYSTEMVERILOG VERILOG)
    # Get the sim_only sources only if we are not running a technology-independent flow
    if(NOT TECH_FLOW)
        get_ip_sources(SIM_SOURCES ${IP_LIB} SYSTEMVERILOG_SIM VERILOG_SIM)
    endif()
    list(PREPEND SOURCES ${SIM_SOURCES})

    # Get IP include directories
    get_ip_include_directories(INC_DIRS ${IP_LIB} SYSTEMVERILOG VERILOG)
    # Prepare include directories arguments for iverilog
    foreach(dir ${INC_DIRS})
        list(APPEND ARG_INCDIRS -I ${dir})
    endforeach()

    # Get IP compile definitions
    get_ip_compile_definitions(COMP_DEFS ${IP_LIB} SYSTEMVERILOG VERILOG VHDL)
    # Prepare compile definitions arguments for iverilog
    foreach(def ${COMP_DEFS})
        list(APPEND CMP_DEFS_ARG -D${def})
    endforeach()

    # Set the output executable name
    if(NOT ARG_EXECUTABLE)
        set(ARG_EXECUTABLE "${OUTDIR}/${IP_LIB}_iv")
    endif()

    # A command file as to be created to pass the timescale information to iverilog
    if(ARG_OUTDIR)
        set(CMDS_FILE ${OUTDIR}/cmds.f)
    else()
        set(CMDS_FILE cmds.f)
    endif()
    # Generate the cmds.f file
    execute_process(
        ERROR_VARIABLE ERROR_MSG
        COMMAND touch ${CMDS_FILE}
    )
    write_file(${CMDS_FILE} "+timescale+${COCOTB_HDL_TIMEUNIT}/${COCOTB_HDL_TIMEPRECISION}")
    # Check the file is generated
    if(NOT EXISTS ${CMDS_FILE})
        message(FATAL_ERROR "${CMDS_FILE} file not generated.")
    endif()

    # Set the stamp file path (is the stamp file really needed?)
    set(STAMP_FILE "${OUTDIR}/${IP_LIB}_${CMAKE_CURRENT_FUNCTION}.stamp")

    # Add a custom command to run iverilog
    add_custom_command(
        OUTPUT ${ARG_EXECUTABLE} ${STAMP_FILE}
        # iverilog must be in your path
        COMMAND iverilog
        -s ${TOP_MODULE}
        ${ARG_INCDIRS}
        ${CMP_DEFS_ARG}
        ${ARG_IVERILOG_CLI_FLAGS}
        -DCOCOTB_SIM=1
        -f ${CMDS_FILE}
        -o ${ARG_EXECUTABLE}
        ${SOURCES}
        COMMAND /bin/sh -c date > ${STAMP_FILE}
        DEPENDS ${SOURCES}
        COMMENT "Running iverilog on ${IP_LIB}"
    )

    # Use TESTCASE for target name if it exists to have a unique name
    if(TESTCASE)
        set(CUSTOM_TARGET_NAME ${TESTCASE})
    else()
        set(CUSTOM_TARGET_NAME ${COCOTB_TEST})
    endif()
    # Add a custom target that depends on the executable and stamp file
    add_custom_target(
        # Add cocotb module name to be able to create multiple targets
        ${CUSTOM_TARGET_NAME}
        DEPENDS ${ARG_EXECUTABLE} ${STAMP_FILE} ${IP_LIB}
    )

    # Get cocotb lib directory
    set(_CMD cocotb-config --lib-dir)
    execute_process(
        OUTPUT_VARIABLE COCOTB_LIB_DIR
        ERROR_VARIABLE ERROR_MSG
        COMMAND ${_CMD}
    )
    # Check the lib path is found
    if(NOT COCOTB_LIB_DIR)
        message(FATAL_ERROR "Cocotb lib directory variable not found. Make sure cocotb package is installed in the python venv.\nError output: ${ERROR_MSG}.\nCommand called: ${_CMD}")
    endif()
    # Remove the line feed of the variable otherwise it breaks the below command
    string(STRIP ${COCOTB_LIB_DIR} COCOTB_LIB_DIR)

    # Get cocotb vpi library for icarus verilog
    set(_CMD cocotb-config --lib-name vpi icarus)
    execute_process(
        OUTPUT_VARIABLE COCOTB_LIB_VPI_ICARUS
        ERROR_VARIABLE ERROR_MSG
        COMMAND ${_CMD}
    )
    # Check the lib is found
    if(NOT COCOTB_LIB_VPI_ICARUS)
        message(FATAL_ERROR "Cocotb lib vpi icarus variable not found. Make sure cocotb package is installed in the python venv.\nError output: ${ERROR_MSG}.\nCommand called: ${_CMD}")
    endif()
    # Remove the line feed of the variable otherwise if breaks the below command
    string(STRIP ${COCOTB_LIB_VPI_ICARUS} COCOTB_LIB_VPI_ICARUS)

    set(COCOTB_ENV_VARS
        $<$<BOOL:${ARG_VIRTUAL_ENV}>:VIRTUAL_ENV=${ARG_VIRTUAL_ENV}>
        PYTHONPATH=${PATH_MODULE}
        MODULE=${COCOTB_TEST}
        TESTCASE=${TESTCASE}
        TOPLEVEL=${TOP_MODULE}
        TOPLEVEL_LANG=${TOPLEVEL_LANG}
        COCOTB_RESULTS_FILE=${OUTDIR}/results.xml
    )
    set(COCOTB_IVERILOG_CMD
        # iverilog run-time engine must be in your path
        vvp -M${COCOTB_LIB_DIR} -m${COCOTB_LIB_VPI_ICARUS}
        # Arguments to pass to execution of compiled simulation
        ${ARG_SIM_ARGS}
        ${ARG_EXECUTABLE}
        # Plusargs to pass to the simulator
        ${ARG_PLUSARGS}
    )

    # Add a custom command to run cocotb
    add_custom_command(
        OUTPUT ${COCOTB_RESULTS_FILE}
        COMMAND ${COCOTB_ENV_VARS}
        # sim command prefix, e.g., for debugging: 'gdb --args'
        ${ARG_SIM_CMD_PREFIX}
        ${COCOTB_IVERILOG_CMD}
        DEPENDS ${CUSTOM_TARGET_NAME}
        COMMENT "Running cocotb simulation on ${IP_LIB}"
        WORKING_DIRECTORY ${OUTDIR}
    )

    # Set the command as a property to be easily found by add_test()
    string(TOUPPER ${CUSTOM_TARGET_NAME} COCOTB_TEST_PROP)
    set_target_properties(${IP_LIB} PROPERTIES COCOTB_IVERILOG_${COCOTB_TEST_PROP}_CMD "${COCOTB_IVERILOG_CMD}")
    set_target_properties(${IP_LIB} PROPERTIES COCOTB_IVERILOG_${COCOTB_TEST_PROP}_ENV "${COCOTB_ENV_VARS}")

    # Add a custom target that depends on the executable and stamp file
    add_custom_target(
        run_${CUSTOM_TARGET_NAME}
        DEPENDS ${COCOTB_RESULTS_FILE}
    )

endfunction()

